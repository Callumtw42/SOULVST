//==============================================================================
// Runs an ADSR envelope using the input as a trigger
processor ADSREnvelope
{
    input stream float triggerLevel;
    output stream float envelopeLevel;
    input event float attack, decay, sustain, release, sensitivity;

    event attack (float f)
    {
        let seconds = 0.001 + 9.999 * pow (f * 0.01f, 4.0f);
        let secondsToLinearStep = 1.0 / (sampleRate * seconds);

        attackRamp = secondsToLinearStep;
    }

    event decay (float f)
    {
        let seconds = 0.001 + 9.999 * pow (f * 0.01f, 4.0f);
        let inverse = 1.0 / (sampleRate * seconds);
        let secondsToMultiplier = pow (0.0001, inverse);

        decayMultiplier = secondsToMultiplier;
    }

    event sustain (float f)
    {
        sustainLevel = float64 (f) * 0.01f;
    }

    event release (float f)
    {
        let seconds = 0.001 + 9.999 * pow (f * 0.01f, 4.0f);
        let inverse = 1.0 / (sampleRate * seconds);
        let secondsToMultiplier = pow (0.0001, inverse);

        releaseMultiplier = secondsToMultiplier;
    }

    event sensitivity (float f)
    {
        velocitySensitivity = f * 0.01f;
    }

    const float sampleRate = float (processor.frequency);

    float64 attackRamp = 0.01;
    float64 decayMultiplier = 0.995;
    float64 sustainLevel = 1.0;
    float64 releaseMultiplier = 0.99991;
    float32 velocitySensitivity = 0.0f;
    float64 targetValue = 1.0;

    void calculateTargetValue (float noteVelocity)
    {
        // Use the velocitySensitivity to decide how the noteVelocity affects the target volume
        // We determine a dB attenuation range, then the note velocity decides where we are on it
        // Full velocity sensitivity is -12dB

        // We use 100 as a 'loud' note, so that's 0.75 out of 100 as 'normal', any higher velocity will be louder
        let attenuation = -12.0f * velocitySensitivity * (0.75f - noteVelocity);

        targetValue = pow (10.0f, attenuation / 10.0f);
    }

    void run()
    {
        float64 value = 0;

        loop
        {
            if (triggerLevel > 0)
            {
                // Use the value of the trigger to modify our target value
                calculateTargetValue (triggerLevel);

                while (value < targetValue)
                {
                    value += attackRamp;
                    envelopeLevel << float(value);
                    advance();

                    if (triggerLevel <= 0)
                        break;
                }

                // Cap it to the target value
                value = min (value, targetValue);

                // Decay stage
                while (value > targetValue * sustainLevel && triggerLevel > 0)
                {
                    value = value * decayMultiplier;
                    envelopeLevel << float (value);
                    advance();
                }

                // Sustain stage
                while (triggerLevel > 0)
                {
                    envelopeLevel << float (value);
                    advance();
                }
            }

            value *= releaseMultiplier;
            envelopeLevel << float (value);
            advance();
        }
    }
}