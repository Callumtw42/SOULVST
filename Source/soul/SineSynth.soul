/*
    == SOUL example code ==

    A simple sine-wave synthesiser featuring pitch-bend support, using a basic
    envelope and voice-allocator.
*/

processor LFO
{
    input event float<128> in;
    output event float<128> out;
    // output event float out2;

    float<128> plot;

    float write (float f)
    {
        // plot = f;
        return f;
    }

    void run()
    {
        loop
        {
        // out << plot;
            advance();
        }
    }
    
}

graph SineSynth  [[ main ]]
{
    input event soul::midi::Message midiIn;

    input smoothedGain.volume [[ label: "Volume", min: -40, max: 0, init: -6, step: 1, unit:"dB"]];
    input event float ampAttack [[label: "Attack", min: 0.01f, max: 100.0f, init: 0.01f, step: 1.0f]];
    input event float ampDecay [[label: "Decay", min: 0.01f, max: 100.0f, init: 0.01f, step: 1.0f]];
    input event float ampSustain [[label: "Sustain", min: 0.01f, max: 100.0f, init: 100.0f, step: 1.0f]];
    input event float ampRelease [[label: "Release", min: 0.01f, max: 100.0f, init: 0.01f, step: 1.0f]];
    input event float detune [[label: "Detune", min: 0.00f, max: 50.0f, init: 0.00f, step: 1.0f]];
    input event float voiceCount [[label: "voiceCount", min: 1, max: 16, init: 1, step: 1]];
    input event float cutoff [[label: "cutoff", min: 0.0f, max: 127.0f, init: 127.0f, step: 1.0f]];
    input stream float lfo;

    output stream float<2> audioOut;
    output event float<128> logOut;


    let
    {
        smoothedGain = soul::gain::SmoothedGainParameter (0.01f);
        voice = Voice;
        midiParser = soul::midi::MPEParser;
        // voiceAllocator = soul::voice_allocators::Basic(8);
        gainProcessor = soul::gain::DynamicGain (float<2>);
        logger = Logger;
        lfo = LFO;
    } 

    connection
    {
        lfo.out -> logOut; 
        cutoff          -> voice.cutoffIn;
        detune  -> voice.detune;
        voiceCount -> voice.voiceCountIn;

        ampAttack -> voice.ampAttack;
        ampDecay -> voice.ampDecay;
        ampSustain -> voice.ampSustain;
        ampRelease -> voice.ampRelease;

        midiIn -> midiParser.parseMIDI;
        midiParser.eventOut -> voice.eventIn; 
        // voiceAllocator.voiceEventOut -> voice.eventIn;
        voice.audioOut -> gainProcessor.in; 
        smoothedGain.gain -> gainProcessor.gain; 
        gainProcessor.out -> audioOut; 
    }
}


