/*
    == SOUL example code ==

    A simple sine-wave synthesiser featuring pitch-bend support, using a basic
    envelope and voice-allocator.
*/

graph SineSynth  [[ main ]]
{
    input smoothedGain.volume [[ label: "Volume", min: -40, max: 0, init: -6, step: 1, unit:"dB"]];
    input event soul::midi::Message midiIn;
    input event
    {
        soul::note_events::NoteOn noteOn;
        soul::note_events::NoteOff noteOff;
        soul::note_events::PitchBend pitchBend;
    }
    output stream float audioOut;

    let
    {
        smoothedGain = soul::gain::SmoothedGainParameter (0.5f);
        voices = Voice[8];
        midiParser = soul::midi::MPEParser;
        voiceAllocator = soul::voice_allocators::Basic(8);
        gainProcessor = soul::gain::DynamicGain (float);
    } 

    connection
    {
        midiIn -> midiParser.parseMIDI;
        midiParser.eventOut -> voiceAllocator.eventIn;
        voiceAllocator.voiceEventOut -> voices.eventIn;
        voices.audioOut -> gainProcessor.in; 
        smoothedGain.gain -> gainProcessor.gain; 
        gainProcessor.out -> audioOut; 
    }
}


